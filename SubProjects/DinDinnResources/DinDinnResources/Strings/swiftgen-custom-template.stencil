// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}public{% endif %}{% endset %}
import Foundation

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length

// MARK: - Strings

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
{% for type in types %}
_ p{{forloop.counter}}: {{type}}{{ ", " if not forloop.last }}
{% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
{% for type in types %}
{% if type == "UnsafePointer<CChar>" %}
p{{forloop.counter}}
{% else %}
String(p{{forloop.counter}})
{% endif %}
{{ ", " if not forloop.last }}
{% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item %}
{% for string in item.strings %}
{% if not param.noComments %}
    /* {{string.translation}} */
{% endif %}
{% if string.types %}
    {{accessModifier}} static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> String {
        return {{enumName}}.tr("{{table}}", "{{string.key}}", {% call argumentsBlock string.types %})
    }
{% else %}
    {{accessModifier}} static var {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: String {
        return {{enumName}}.tr("{{table}}", "{{string.key}}")
    }
{% endif %}
{% endfor %}
{% for child in item.children %}

{{accessModifier}} enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
{% filter indent:2 %}{% call recursiveBlock table child %}{% endfilter %}
}
{% endfor %}
{% endmacro %}
// swiftlint:disable explicit_type_interface function_parameter_count identifier_name line_length
// swiftlint:disable nesting type_body_length type_name
{% set enumName %}{{param.enumName|default:"AppStrings"}}{% endset %}
{{accessModifier}} enum {{enumName}} {
{% if tables.count > 1 %}
{% for table in tables %}
{{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
{% filter indent:2 %}{% call recursiveBlock table.name table.levels %}{% endfilter %}
}
{% endfor %}
{% else %}
{% call recursiveBlock tables.first.name tables.first.levels %}
{% endif %}
}
// swiftlint:enable explicit_type_interface function_parameter_count identifier_name line_length
// swiftlint:enable nesting type_body_length type_name

// MARK: - Implementation Details

extension {{enumName}} {
    private static func tr(_ table: String, _ key: String, _ args: CVarArg...) -> String {
        // swiftlint:disable:next nslocalizedstring_key
        let bundle = Bundle(for: LanguageManager.self)
        
        let format = NSLocalizedString(key, tableName: table, bundle: bundle, comment: "")
        var newFormat = format.replacingOccurrences(of: "%d", with: "%s")
        newFormat = newFormat.replacingOccurrences(of: "%s", with: "%@")
        newFormat = newFormat.replacingOccurrences(of: "%i", with: "%@")
        newFormat = newFormat.replacingOccurrences(of: "$d", with: "$s")
        newFormat = newFormat.replacingOccurrences(of: "$s", with: "$@")
        newFormat = newFormat.replacingOccurrences(of: "$i", with: "$@")
        let locale = Locale(identifier: LanguageManager.shared.currentLanguage.rawValue)
        return String(format: newFormat, locale: locale, arguments: args)
    }
    
    static func get(_ key: String) -> String? {
        let value = AppStrings.tr("Stirngs", key)
        guard value != key else { return nil }
        return value
    }
}
{% else %}
// No string found
{% endif %}
